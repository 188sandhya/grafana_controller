// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/service (interfaces: IDashboardService,IDatasourceService,IFeedbackService,IHappinessMetricService,IHealthService,IOrganizationService,IParamExistCheckService,IProductsStatusService,IRecommendationVoteService,ISDAService,ISloService,ISolutionSloService,ISolutionsService,IUserInfoService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/model"
	auth "github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/model/auth"
	grafana "github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/model/grafana"
)

// MockIDashboardService is a mock of IDashboardService interface.
type MockIDashboardService struct {
	ctrl     *gomock.Controller
	recorder *MockIDashboardServiceMockRecorder
}

// MockIDashboardServiceMockRecorder is the mock recorder for MockIDashboardService.
type MockIDashboardServiceMockRecorder struct {
	mock *MockIDashboardService
}

// NewMockIDashboardService creates a new mock instance.
func NewMockIDashboardService(ctrl *gomock.Controller) *MockIDashboardService {
	mock := &MockIDashboardService{ctrl: ctrl}
	mock.recorder = &MockIDashboardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDashboardService) EXPECT() *MockIDashboardServiceMockRecorder {
	return m.recorder
}

// CreateDashboard mocks base method.
func (m *MockIDashboardService) CreateDashboard(arg0 *auth.UserContext, arg1 *model.Slo, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockIDashboardServiceMockRecorder) CreateDashboard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockIDashboardService)(nil).CreateDashboard), arg0, arg1, arg2)
}

// DeleteDashboard mocks base method.
func (m *MockIDashboardService) DeleteDashboard(arg0 *auth.UserContext, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockIDashboardServiceMockRecorder) DeleteDashboard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockIDashboardService)(nil).DeleteDashboard), arg0, arg1, arg2)
}

// UpdateDashboard mocks base method.
func (m *MockIDashboardService) UpdateDashboard(arg0 *auth.UserContext, arg1 *model.Slo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDashboard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDashboard indicates an expected call of UpdateDashboard.
func (mr *MockIDashboardServiceMockRecorder) UpdateDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboard", reflect.TypeOf((*MockIDashboardService)(nil).UpdateDashboard), arg0, arg1)
}

// MockIDatasourceService is a mock of IDatasourceService interface.
type MockIDatasourceService struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasourceServiceMockRecorder
}

// MockIDatasourceServiceMockRecorder is the mock recorder for MockIDatasourceService.
type MockIDatasourceServiceMockRecorder struct {
	mock *MockIDatasourceService
}

// NewMockIDatasourceService creates a new mock instance.
func NewMockIDatasourceService(ctrl *gomock.Controller) *MockIDatasourceService {
	mock := &MockIDatasourceService{ctrl: ctrl}
	mock.recorder = &MockIDatasourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasourceService) EXPECT() *MockIDatasourceServiceMockRecorder {
	return m.recorder
}

// GetDatasourceByID mocks base method.
func (m *MockIDatasourceService) GetDatasourceByID(arg0 int64) (*grafana.Datasource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasourceByID", arg0)
	ret0, _ := ret[0].(*grafana.Datasource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasourceByID indicates an expected call of GetDatasourceByID.
func (mr *MockIDatasourceServiceMockRecorder) GetDatasourceByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasourceByID", reflect.TypeOf((*MockIDatasourceService)(nil).GetDatasourceByID), arg0)
}

// GetDatasourcesByOrganizationID mocks base method.
func (m *MockIDatasourceService) GetDatasourcesByOrganizationID(arg0 int64) ([]*grafana.Datasource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasourcesByOrganizationID", arg0)
	ret0, _ := ret[0].([]*grafana.Datasource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasourcesByOrganizationID indicates an expected call of GetDatasourcesByOrganizationID.
func (mr *MockIDatasourceServiceMockRecorder) GetDatasourcesByOrganizationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasourcesByOrganizationID", reflect.TypeOf((*MockIDatasourceService)(nil).GetDatasourcesByOrganizationID), arg0)
}

// MockIFeedbackService is a mock of IFeedbackService interface.
type MockIFeedbackService struct {
	ctrl     *gomock.Controller
	recorder *MockIFeedbackServiceMockRecorder
}

// MockIFeedbackServiceMockRecorder is the mock recorder for MockIFeedbackService.
type MockIFeedbackServiceMockRecorder struct {
	mock *MockIFeedbackService
}

// NewMockIFeedbackService creates a new mock instance.
func NewMockIFeedbackService(ctrl *gomock.Controller) *MockIFeedbackService {
	mock := &MockIFeedbackService{ctrl: ctrl}
	mock.recorder = &MockIFeedbackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFeedbackService) EXPECT() *MockIFeedbackServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFeedbackService) Create(arg0 *model.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIFeedbackServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFeedbackService)(nil).Create), arg0)
}

// GetByOrgID mocks base method.
func (m *MockIFeedbackService) GetByOrgID(arg0 int64) ([]*model.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrgID", arg0)
	ret0, _ := ret[0].([]*model.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrgID indicates an expected call of GetByOrgID.
func (mr *MockIFeedbackServiceMockRecorder) GetByOrgID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrgID", reflect.TypeOf((*MockIFeedbackService)(nil).GetByOrgID), arg0)
}

// MockIHappinessMetricService is a mock of IHappinessMetricService interface.
type MockIHappinessMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockIHappinessMetricServiceMockRecorder
}

// MockIHappinessMetricServiceMockRecorder is the mock recorder for MockIHappinessMetricService.
type MockIHappinessMetricServiceMockRecorder struct {
	mock *MockIHappinessMetricService
}

// NewMockIHappinessMetricService creates a new mock instance.
func NewMockIHappinessMetricService(ctrl *gomock.Controller) *MockIHappinessMetricService {
	mock := &MockIHappinessMetricService{ctrl: ctrl}
	mock.recorder = &MockIHappinessMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHappinessMetricService) EXPECT() *MockIHappinessMetricServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIHappinessMetricService) Create(arg0 *auth.UserContext, arg1 *model.HappinessMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIHappinessMetricServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIHappinessMetricService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIHappinessMetricService) Delete(arg0 *auth.UserContext, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIHappinessMetricServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIHappinessMetricService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIHappinessMetricService) Get(arg0 int64) (*model.HappinessMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.HappinessMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIHappinessMetricServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIHappinessMetricService)(nil).Get), arg0)
}

// GetAllHappinessMetricsForTeam mocks base method.
func (m *MockIHappinessMetricService) GetAllHappinessMetricsForTeam(arg0 int64) ([]*model.HappinessMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHappinessMetricsForTeam", arg0)
	ret0, _ := ret[0].([]*model.HappinessMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHappinessMetricsForTeam indicates an expected call of GetAllHappinessMetricsForTeam.
func (mr *MockIHappinessMetricServiceMockRecorder) GetAllHappinessMetricsForTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHappinessMetricsForTeam", reflect.TypeOf((*MockIHappinessMetricService)(nil).GetAllHappinessMetricsForTeam), arg0)
}

// GetAllHappinessMetricsForUser mocks base method.
func (m *MockIHappinessMetricService) GetAllHappinessMetricsForUser(arg0, arg1 int64) ([]*model.HappinessMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHappinessMetricsForUser", arg0, arg1)
	ret0, _ := ret[0].([]*model.HappinessMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHappinessMetricsForUser indicates an expected call of GetAllHappinessMetricsForUser.
func (mr *MockIHappinessMetricServiceMockRecorder) GetAllHappinessMetricsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHappinessMetricsForUser", reflect.TypeOf((*MockIHappinessMetricService)(nil).GetAllHappinessMetricsForUser), arg0, arg1)
}

// GetUsersMissingInput mocks base method.
func (m *MockIHappinessMetricService) GetUsersMissingInput(arg0 int64) ([]*model.UserMissingInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersMissingInput", arg0)
	ret0, _ := ret[0].([]*model.UserMissingInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersMissingInput indicates an expected call of GetUsersMissingInput.
func (mr *MockIHappinessMetricServiceMockRecorder) GetUsersMissingInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersMissingInput", reflect.TypeOf((*MockIHappinessMetricService)(nil).GetUsersMissingInput), arg0)
}

// SaveTeamAverage mocks base method.
func (m *MockIHappinessMetricService) SaveTeamAverage(arg0 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTeamAverage", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTeamAverage indicates an expected call of SaveTeamAverage.
func (mr *MockIHappinessMetricServiceMockRecorder) SaveTeamAverage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeamAverage", reflect.TypeOf((*MockIHappinessMetricService)(nil).SaveTeamAverage), arg0)
}

// Update mocks base method.
func (m *MockIHappinessMetricService) Update(arg0 *auth.UserContext, arg1 *model.HappinessMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIHappinessMetricServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIHappinessMetricService)(nil).Update), arg0, arg1)
}

// MockIHealthService is a mock of IHealthService interface.
type MockIHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthServiceMockRecorder
}

// MockIHealthServiceMockRecorder is the mock recorder for MockIHealthService.
type MockIHealthServiceMockRecorder struct {
	mock *MockIHealthService
}

// NewMockIHealthService creates a new mock instance.
func NewMockIHealthService(ctrl *gomock.Controller) *MockIHealthService {
	mock := &MockIHealthService{ctrl: ctrl}
	mock.recorder = &MockIHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthService) EXPECT() *MockIHealthServiceMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockIHealthService) CheckHealth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockIHealthServiceMockRecorder) CheckHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockIHealthService)(nil).CheckHealth))
}

// MockIOrganizationService is a mock of IOrganizationService interface.
type MockIOrganizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationServiceMockRecorder
}

// MockIOrganizationServiceMockRecorder is the mock recorder for MockIOrganizationService.
type MockIOrganizationServiceMockRecorder struct {
	mock *MockIOrganizationService
}

// NewMockIOrganizationService creates a new mock instance.
func NewMockIOrganizationService(ctrl *gomock.Controller) *MockIOrganizationService {
	mock := &MockIOrganizationService{ctrl: ctrl}
	mock.recorder = &MockIOrganizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrganizationService) EXPECT() *MockIOrganizationServiceMockRecorder {
	return m.recorder
}

// GetOrganizationByID mocks base method.
func (m *MockIOrganizationService) GetOrganizationByID(arg0 int64) (*grafana.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByID", arg0)
	ret0, _ := ret[0].(*grafana.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByID indicates an expected call of GetOrganizationByID.
func (mr *MockIOrganizationServiceMockRecorder) GetOrganizationByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByID", reflect.TypeOf((*MockIOrganizationService)(nil).GetOrganizationByID), arg0)
}

// MockIParamExistCheckService is a mock of IParamExistCheckService interface.
type MockIParamExistCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockIParamExistCheckServiceMockRecorder
}

// MockIParamExistCheckServiceMockRecorder is the mock recorder for MockIParamExistCheckService.
type MockIParamExistCheckServiceMockRecorder struct {
	mock *MockIParamExistCheckService
}

// NewMockIParamExistCheckService creates a new mock instance.
func NewMockIParamExistCheckService(ctrl *gomock.Controller) *MockIParamExistCheckService {
	mock := &MockIParamExistCheckService{ctrl: ctrl}
	mock.recorder = &MockIParamExistCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParamExistCheckService) EXPECT() *MockIParamExistCheckServiceMockRecorder {
	return m.recorder
}

// CheckOrgByID mocks base method.
func (m *MockIParamExistCheckService) CheckOrgByID(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrgByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrgByID indicates an expected call of CheckOrgByID.
func (mr *MockIParamExistCheckServiceMockRecorder) CheckOrgByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrgByID", reflect.TypeOf((*MockIParamExistCheckService)(nil).CheckOrgByID), arg0)
}

// CheckSloByID mocks base method.
func (m *MockIParamExistCheckService) CheckSloByID(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSloByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSloByID indicates an expected call of CheckSloByID.
func (mr *MockIParamExistCheckServiceMockRecorder) CheckSloByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSloByID", reflect.TypeOf((*MockIParamExistCheckService)(nil).CheckSloByID), arg0)
}

// MockIProductsStatusService is a mock of IProductsStatusService interface.
type MockIProductsStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockIProductsStatusServiceMockRecorder
}

// MockIProductsStatusServiceMockRecorder is the mock recorder for MockIProductsStatusService.
type MockIProductsStatusServiceMockRecorder struct {
	mock *MockIProductsStatusService
}

// NewMockIProductsStatusService creates a new mock instance.
func NewMockIProductsStatusService(ctrl *gomock.Controller) *MockIProductsStatusService {
	mock := &MockIProductsStatusService{ctrl: ctrl}
	mock.recorder = &MockIProductsStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductsStatusService) EXPECT() *MockIProductsStatusServiceMockRecorder {
	return m.recorder
}

// GetProductsStatus mocks base method.
func (m *MockIProductsStatusService) GetProductsStatus() ([]*model.ProductStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsStatus")
	ret0, _ := ret[0].([]*model.ProductStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsStatus indicates an expected call of GetProductsStatus.
func (mr *MockIProductsStatusServiceMockRecorder) GetProductsStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsStatus", reflect.TypeOf((*MockIProductsStatusService)(nil).GetProductsStatus))
}

// MockIRecommendationVoteService is a mock of IRecommendationVoteService interface.
type MockIRecommendationVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockIRecommendationVoteServiceMockRecorder
}

// MockIRecommendationVoteServiceMockRecorder is the mock recorder for MockIRecommendationVoteService.
type MockIRecommendationVoteServiceMockRecorder struct {
	mock *MockIRecommendationVoteService
}

// NewMockIRecommendationVoteService creates a new mock instance.
func NewMockIRecommendationVoteService(ctrl *gomock.Controller) *MockIRecommendationVoteService {
	mock := &MockIRecommendationVoteService{ctrl: ctrl}
	mock.recorder = &MockIRecommendationVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecommendationVoteService) EXPECT() *MockIRecommendationVoteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRecommendationVoteService) Create(arg0 *model.RecommendationVote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRecommendationVoteServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRecommendationVoteService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRecommendationVoteService) Delete(arg0 *model.RecommendationVote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRecommendationVoteServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRecommendationVoteService)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIRecommendationVoteService) Get(arg0 int64, arg1 *int64) ([]*model.RecommendationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]*model.RecommendationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRecommendationVoteServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRecommendationVoteService)(nil).Get), arg0, arg1)
}

// MockISDAService is a mock of ISDAService interface.
type MockISDAService struct {
	ctrl     *gomock.Controller
	recorder *MockISDAServiceMockRecorder
}

// MockISDAServiceMockRecorder is the mock recorder for MockISDAService.
type MockISDAServiceMockRecorder struct {
	mock *MockISDAService
}

// NewMockISDAService creates a new mock instance.
func NewMockISDAService(ctrl *gomock.Controller) *MockISDAService {
	mock := &MockISDAService{ctrl: ctrl}
	mock.recorder = &MockISDAServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISDAService) EXPECT() *MockISDAServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockISDAService) GetConfig() ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockISDAServiceMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockISDAService)(nil).GetConfig))
}

// GetSDAFeatureByOrg mocks base method.
func (m *MockISDAService) GetSDAFeatureByOrg(arg0 int64) (*model.SDAFeatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDAFeatureByOrg", arg0)
	ret0, _ := ret[0].(*model.SDAFeatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSDAFeatureByOrg indicates an expected call of GetSDAFeatureByOrg.
func (mr *MockISDAServiceMockRecorder) GetSDAFeatureByOrg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDAFeatureByOrg", reflect.TypeOf((*MockISDAService)(nil).GetSDAFeatureByOrg), arg0)
}

// MockISloService is a mock of ISloService interface.
type MockISloService struct {
	ctrl     *gomock.Controller
	recorder *MockISloServiceMockRecorder
}

// MockISloServiceMockRecorder is the mock recorder for MockISloService.
type MockISloServiceMockRecorder struct {
	mock *MockISloService
}

// NewMockISloService creates a new mock instance.
func NewMockISloService(ctrl *gomock.Controller) *MockISloService {
	mock := &MockISloService{ctrl: ctrl}
	mock.recorder = &MockISloServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISloService) EXPECT() *MockISloServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISloService) Create(arg0 *auth.UserContext, arg1 *model.Slo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISloServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISloService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockISloService) Delete(arg0 *auth.UserContext, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISloServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISloService)(nil).Delete), arg0, arg1)
}

// DeleteSloHistory mocks base method.
func (m *MockISloService) DeleteSloHistory(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSloHistory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSloHistory indicates an expected call of DeleteSloHistory.
func (mr *MockISloServiceMockRecorder) DeleteSloHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSloHistory", reflect.TypeOf((*MockISloService)(nil).DeleteSloHistory), arg0)
}

// FindSlos mocks base method.
func (m *MockISloService) FindSlos(arg0 *model.SloQueryParams) ([]*model.Slo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSlos", arg0)
	ret0, _ := ret[0].([]*model.Slo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSlos indicates an expected call of FindSlos.
func (mr *MockISloServiceMockRecorder) FindSlos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSlos", reflect.TypeOf((*MockISloService)(nil).FindSlos), arg0)
}

// Get mocks base method.
func (m *MockISloService) Get(arg0 int64) (*model.Slo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.Slo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockISloServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockISloService)(nil).Get), arg0)
}

// GetByOrgID mocks base method.
func (m *MockISloService) GetByOrgID(arg0 int64) ([]*model.Slo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrgID", arg0)
	ret0, _ := ret[0].([]*model.Slo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrgID indicates an expected call of GetByOrgID.
func (mr *MockISloServiceMockRecorder) GetByOrgID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrgID", reflect.TypeOf((*MockISloService)(nil).GetByOrgID), arg0)
}

// GetDetailedSlos mocks base method.
func (m *MockISloService) GetDetailedSlos(arg0, arg1 string) ([]*model.DetailedSlo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedSlos", arg0, arg1)
	ret0, _ := ret[0].([]*model.DetailedSlo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedSlos indicates an expected call of GetDetailedSlos.
func (mr *MockISloServiceMockRecorder) GetDetailedSlos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedSlos", reflect.TypeOf((*MockISloService)(nil).GetDetailedSlos), arg0, arg1)
}

// Update mocks base method.
func (m *MockISloService) Update(arg0 *auth.UserContext, arg1 *model.Slo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISloServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISloService)(nil).Update), arg0, arg1)
}

// MockISolutionSloService is a mock of ISolutionSloService interface.
type MockISolutionSloService struct {
	ctrl     *gomock.Controller
	recorder *MockISolutionSloServiceMockRecorder
}

// MockISolutionSloServiceMockRecorder is the mock recorder for MockISolutionSloService.
type MockISolutionSloServiceMockRecorder struct {
	mock *MockISolutionSloService
}

// NewMockISolutionSloService creates a new mock instance.
func NewMockISolutionSloService(ctrl *gomock.Controller) *MockISolutionSloService {
	mock := &MockISolutionSloService{ctrl: ctrl}
	mock.recorder = &MockISolutionSloServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISolutionSloService) EXPECT() *MockISolutionSloServiceMockRecorder {
	return m.recorder
}

// GetSolutionSlo mocks base method.
func (m *MockISolutionSloService) GetSolutionSlo(arg0 string) (*model.SolutionSlo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionSlo", arg0)
	ret0, _ := ret[0].(*model.SolutionSlo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionSlo indicates an expected call of GetSolutionSlo.
func (mr *MockISolutionSloServiceMockRecorder) GetSolutionSlo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionSlo", reflect.TypeOf((*MockISolutionSloService)(nil).GetSolutionSlo), arg0)
}

// MockISolutionsService is a mock of ISolutionsService interface.
type MockISolutionsService struct {
	ctrl     *gomock.Controller
	recorder *MockISolutionsServiceMockRecorder
}

// MockISolutionsServiceMockRecorder is the mock recorder for MockISolutionsService.
type MockISolutionsServiceMockRecorder struct {
	mock *MockISolutionsService
}

// NewMockISolutionsService creates a new mock instance.
func NewMockISolutionsService(ctrl *gomock.Controller) *MockISolutionsService {
	mock := &MockISolutionsService{ctrl: ctrl}
	mock.recorder = &MockISolutionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISolutionsService) EXPECT() *MockISolutionsServiceMockRecorder {
	return m.recorder
}

// GetSolutions mocks base method.
func (m *MockISolutionsService) GetSolutions(arg0, arg1 bool, arg2 string) ([]*model.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions.
func (mr *MockISolutionsServiceMockRecorder) GetSolutions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockISolutionsService)(nil).GetSolutions), arg0, arg1, arg2)
}

// MockIUserInfoService is a mock of IUserInfoService interface.
type MockIUserInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserInfoServiceMockRecorder
}

// MockIUserInfoServiceMockRecorder is the mock recorder for MockIUserInfoService.
type MockIUserInfoServiceMockRecorder struct {
	mock *MockIUserInfoService
}

// NewMockIUserInfoService creates a new mock instance.
func NewMockIUserInfoService(ctrl *gomock.Controller) *MockIUserInfoService {
	mock := &MockIUserInfoService{ctrl: ctrl}
	mock.recorder = &MockIUserInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserInfoService) EXPECT() *MockIUserInfoServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockIUserInfoService) GetUserInfo(arg0 int64) (*grafana.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*grafana.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockIUserInfoServiceMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserInfo), arg0)
}
