// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/client/grafana (interfaces: IClient)

// Package grafana is a generated GoMock package.
package grafana

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grafana "github.com/metro-digital-inner-source/errorbudget-grafana-controller/grafana-controller/model/grafana"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// CreateDashboard mocks base method.
func (m *MockIClient) CreateDashboard(arg0 string, arg1, arg2 int64, arg3 bool, arg4 string) (*grafana.DashboardIDDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboard", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*grafana.DashboardIDDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockIClientMockRecorder) CreateDashboard(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockIClient)(nil).CreateDashboard), arg0, arg1, arg2, arg3, arg4)
}

// CreateDatasource mocks base method.
func (m *MockIClient) CreateDatasource(arg0 string, arg1 int64, arg2 string) (*grafana.DatasourceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasource", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafana.DatasourceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasource indicates an expected call of CreateDatasource.
func (mr *MockIClientMockRecorder) CreateDatasource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasource", reflect.TypeOf((*MockIClient)(nil).CreateDatasource), arg0, arg1, arg2)
}

// CreateFolder mocks base method.
func (m *MockIClient) CreateFolder(arg0 int64, arg1, arg2 string) (*grafana.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafana.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockIClientMockRecorder) CreateFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockIClient)(nil).CreateFolder), arg0, arg1, arg2)
}

// CreateTeam mocks base method.
func (m *MockIClient) CreateTeam(arg0 string, arg1 int64, arg2 string) (*grafana.CreateTeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafana.CreateTeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockIClientMockRecorder) CreateTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockIClient)(nil).CreateTeam), arg0, arg1, arg2)
}

// DeleteDashboard mocks base method.
func (m *MockIClient) DeleteDashboard(arg0, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockIClientMockRecorder) DeleteDashboard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockIClient)(nil).DeleteDashboard), arg0, arg1, arg2)
}

// EnablePlugin mocks base method.
func (m *MockIClient) EnablePlugin(arg0 *grafana.PluginSettings, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePlugin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePlugin indicates an expected call of EnablePlugin.
func (mr *MockIClientMockRecorder) EnablePlugin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePlugin", reflect.TypeOf((*MockIClient)(nil).EnablePlugin), arg0, arg1, arg2)
}

// GetFolders mocks base method.
func (m *MockIClient) GetFolders(arg0 int64, arg1 string) ([]*grafana.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders", arg0, arg1)
	ret0, _ := ret[0].([]*grafana.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockIClientMockRecorder) GetFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockIClient)(nil).GetFolders), arg0, arg1)
}

// GetTeam mocks base method.
func (m *MockIClient) GetTeam(arg0 string, arg1 int64, arg2 string) (*grafana.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafana.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockIClientMockRecorder) GetTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockIClient)(nil).GetTeam), arg0, arg1, arg2)
}

// Login mocks base method.
func (m *MockIClient) Login(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIClientMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIClient)(nil).Login), arg0, arg1)
}

// UpdateDatasource mocks base method.
func (m *MockIClient) UpdateDatasource(arg0 int64, arg1 string, arg2 int64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasource indicates an expected call of UpdateDatasource.
func (mr *MockIClientMockRecorder) UpdateDatasource(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasource", reflect.TypeOf((*MockIClient)(nil).UpdateDatasource), arg0, arg1, arg2, arg3)
}
